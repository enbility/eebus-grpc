// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: usecases/eg/lpc/service.proto

package lpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_usecases_eg_lpc_service_proto protoreflect.FileDescriptor

var file_usecases_eg_lpc_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x65, 0x67, 0x2f, 0x6c, 0x70,
	0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x1a, 0x1e, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2f, 0x65, 0x67, 0x2f, 0x6c, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xf7, 0x08, 0x0a, 0x15, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x47, 0x75, 0x61, 0x72, 0x64, 0x4c, 0x50, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x57, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x15, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x67, 0x5f, 0x6c,
	0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x23, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x61, 0x66, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x2e, 0x65, 0x67, 0x5f,
	0x6c, 0x70, 0x63, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x61, 0x66, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x61, 0x66, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x28, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46,
	0x61, 0x69, 0x6c, 0x73, 0x61, 0x66, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x37, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x61, 0x66, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x67,
	0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x61,
	0x66, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x17, 0x46, 0x61, 0x69, 0x6c, 0x73,
	0x61, 0x66, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x12, 0x26, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x73, 0x61, 0x66, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x67, 0x5f,
	0x6c, 0x70, 0x63, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x61, 0x66, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x1c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x73, 0x61, 0x66, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x2b, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x61, 0x66, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x61, 0x66, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x12, 0x1d, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x19, 0x49, 0x73, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x49, 0x73, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65,
	0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x49, 0x73, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x12, 0x24, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x67, 0x5f, 0x6c, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x45, 0x56, 0x65, 0x72, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x65, 0x67,
	0x2f, 0x6c, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_usecases_eg_lpc_service_proto_goTypes = []any{
	(*ConsumptionLimitRequest)(nil),                          // 0: eg_lpc.ConsumptionLimitRequest
	(*WriteConsumptionLimitRequest)(nil),                     // 1: eg_lpc.WriteConsumptionLimitRequest
	(*FailsafeConsumptionActivePowerLimitRequest)(nil),       // 2: eg_lpc.FailsafeConsumptionActivePowerLimitRequest
	(*WriteFailsafeConsumptionActivePowerLimitRequest)(nil),  // 3: eg_lpc.WriteFailsafeConsumptionActivePowerLimitRequest
	(*FailsafeDurationMinimumRequest)(nil),                   // 4: eg_lpc.FailsafeDurationMinimumRequest
	(*WriteFailsafeDurationMinimumRequest)(nil),              // 5: eg_lpc.WriteFailsafeDurationMinimumRequest
	(*StartHeartbeatRequest)(nil),                            // 6: eg_lpc.StartHeartbeatRequest
	(*StopHeartbeatRequest)(nil),                             // 7: eg_lpc.StopHeartbeatRequest
	(*IsHeartbeatWithinDurationRequest)(nil),                 // 8: eg_lpc.IsHeartbeatWithinDurationRequest
	(*ConsumptionNominalMaxRequest)(nil),                     // 9: eg_lpc.ConsumptionNominalMaxRequest
	(*ConsumptionLimitResponse)(nil),                         // 10: eg_lpc.ConsumptionLimitResponse
	(*WriteConsumptionLimitResponse)(nil),                    // 11: eg_lpc.WriteConsumptionLimitResponse
	(*FailsafeConsumptionActivePowerLimitResponse)(nil),      // 12: eg_lpc.FailsafeConsumptionActivePowerLimitResponse
	(*WriteFailsafeConsumptionActivePowerLimitResponse)(nil), // 13: eg_lpc.WriteFailsafeConsumptionActivePowerLimitResponse
	(*FailsafeDurationMinimumResponse)(nil),                  // 14: eg_lpc.FailsafeDurationMinimumResponse
	(*WriteFailsafeDurationMinimumResponse)(nil),             // 15: eg_lpc.WriteFailsafeDurationMinimumResponse
	(*StartHeartbeatResponse)(nil),                           // 16: eg_lpc.StartHeartbeatResponse
	(*StopHeartbeatResponse)(nil),                            // 17: eg_lpc.StopHeartbeatResponse
	(*IsHeartbeatWithinDurationResponse)(nil),                // 18: eg_lpc.IsHeartbeatWithinDurationResponse
	(*ConsumptionNominalMaxResponse)(nil),                    // 19: eg_lpc.ConsumptionNominalMaxResponse
}
var file_usecases_eg_lpc_service_proto_depIdxs = []int32{
	0,  // 0: eg_lpc.EnergyGuardLPCControl.ConsumptionLimit:input_type -> eg_lpc.ConsumptionLimitRequest
	1,  // 1: eg_lpc.EnergyGuardLPCControl.WriteConsumptionLimit:input_type -> eg_lpc.WriteConsumptionLimitRequest
	2,  // 2: eg_lpc.EnergyGuardLPCControl.FailsafeConsumptionActivePowerLimit:input_type -> eg_lpc.FailsafeConsumptionActivePowerLimitRequest
	3,  // 3: eg_lpc.EnergyGuardLPCControl.WriteFailsafeConsumptionActivePowerLimit:input_type -> eg_lpc.WriteFailsafeConsumptionActivePowerLimitRequest
	4,  // 4: eg_lpc.EnergyGuardLPCControl.FailsafeDurationMinimum:input_type -> eg_lpc.FailsafeDurationMinimumRequest
	5,  // 5: eg_lpc.EnergyGuardLPCControl.WriteFailsafeDurationMinimum:input_type -> eg_lpc.WriteFailsafeDurationMinimumRequest
	6,  // 6: eg_lpc.EnergyGuardLPCControl.StartHeartbeat:input_type -> eg_lpc.StartHeartbeatRequest
	7,  // 7: eg_lpc.EnergyGuardLPCControl.StopHeartbeat:input_type -> eg_lpc.StopHeartbeatRequest
	8,  // 8: eg_lpc.EnergyGuardLPCControl.IsHeartbeatWithinDuration:input_type -> eg_lpc.IsHeartbeatWithinDurationRequest
	9,  // 9: eg_lpc.EnergyGuardLPCControl.ConsumptionNominalMax:input_type -> eg_lpc.ConsumptionNominalMaxRequest
	10, // 10: eg_lpc.EnergyGuardLPCControl.ConsumptionLimit:output_type -> eg_lpc.ConsumptionLimitResponse
	11, // 11: eg_lpc.EnergyGuardLPCControl.WriteConsumptionLimit:output_type -> eg_lpc.WriteConsumptionLimitResponse
	12, // 12: eg_lpc.EnergyGuardLPCControl.FailsafeConsumptionActivePowerLimit:output_type -> eg_lpc.FailsafeConsumptionActivePowerLimitResponse
	13, // 13: eg_lpc.EnergyGuardLPCControl.WriteFailsafeConsumptionActivePowerLimit:output_type -> eg_lpc.WriteFailsafeConsumptionActivePowerLimitResponse
	14, // 14: eg_lpc.EnergyGuardLPCControl.FailsafeDurationMinimum:output_type -> eg_lpc.FailsafeDurationMinimumResponse
	15, // 15: eg_lpc.EnergyGuardLPCControl.WriteFailsafeDurationMinimum:output_type -> eg_lpc.WriteFailsafeDurationMinimumResponse
	16, // 16: eg_lpc.EnergyGuardLPCControl.StartHeartbeat:output_type -> eg_lpc.StartHeartbeatResponse
	17, // 17: eg_lpc.EnergyGuardLPCControl.StopHeartbeat:output_type -> eg_lpc.StopHeartbeatResponse
	18, // 18: eg_lpc.EnergyGuardLPCControl.IsHeartbeatWithinDuration:output_type -> eg_lpc.IsHeartbeatWithinDurationResponse
	19, // 19: eg_lpc.EnergyGuardLPCControl.ConsumptionNominalMax:output_type -> eg_lpc.ConsumptionNominalMaxResponse
	10, // [10:20] is the sub-list for method output_type
	0,  // [0:10] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_usecases_eg_lpc_service_proto_init() }
func file_usecases_eg_lpc_service_proto_init() {
	if File_usecases_eg_lpc_service_proto != nil {
		return
	}
	file_usecases_eg_lpc_messages_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_usecases_eg_lpc_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_usecases_eg_lpc_service_proto_goTypes,
		DependencyIndexes: file_usecases_eg_lpc_service_proto_depIdxs,
	}.Build()
	File_usecases_eg_lpc_service_proto = out.File
	file_usecases_eg_lpc_service_proto_rawDesc = nil
	file_usecases_eg_lpc_service_proto_goTypes = nil
	file_usecases_eg_lpc_service_proto_depIdxs = nil
}
