// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: control_service/control_service.proto

package control_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ControlService_StartService_FullMethodName           = "/control_service.ControlService/StartService"
	ControlService_StopService_FullMethodName            = "/control_service.ControlService/StopService"
	ControlService_SetConfig_FullMethodName              = "/control_service.ControlService/SetConfig"
	ControlService_StartSetup_FullMethodName             = "/control_service.ControlService/StartSetup"
	ControlService_AddEntity_FullMethodName              = "/control_service.ControlService/AddEntity"
	ControlService_RemoveEntity_FullMethodName           = "/control_service.ControlService/RemoveEntity"
	ControlService_RegisterRemoteSki_FullMethodName      = "/control_service.ControlService/RegisterRemoteSki"
	ControlService_AddUseCase_FullMethodName             = "/control_service.ControlService/AddUseCase"
	ControlService_SubscribeUseCaseEvents_FullMethodName = "/control_service.ControlService/SubscribeUseCaseEvents"
)

// ControlServiceClient is the client API for ControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlServiceClient interface {
	// Starts the EEBus service
	StartService(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Stops the EEBus service
	StopService(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Set Config for the EEBus service
	// Each parameter is optional. If a parameter is not set, the current value is used.
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Starts Setup() for the EEBus service
	StartSetup(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Adds a new entity to the EEBus service
	AddEntity(ctx context.Context, in *AddEntityRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Removes an entity from the EEBus service
	RemoveEntity(ctx context.Context, in *RemoveEntityRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Register remote SKI to the EEBus service
	RegisterRemoteSki(ctx context.Context, in *RegisterRemoteSkiRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Adds an usecase to the EEBus service
	AddUseCase(ctx context.Context, in *AddUseCaseRequest, opts ...grpc.CallOption) (*AddUseCaseResponse, error)
	// Subscribes to usecase events
	SubscribeUseCaseEvents(ctx context.Context, in *SubscribeUseCaseEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeUseCaseEventsResponse], error)
}

type controlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlServiceClient(cc grpc.ClientConnInterface) ControlServiceClient {
	return &controlServiceClient{cc}
}

func (c *controlServiceClient) StartService(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, ControlService_StartService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) StopService(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, ControlService_StopService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, ControlService_SetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) StartSetup(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, ControlService_StartSetup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) AddEntity(ctx context.Context, in *AddEntityRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, ControlService_AddEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) RemoveEntity(ctx context.Context, in *RemoveEntityRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, ControlService_RemoveEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) RegisterRemoteSki(ctx context.Context, in *RegisterRemoteSkiRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, ControlService_RegisterRemoteSki_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) AddUseCase(ctx context.Context, in *AddUseCaseRequest, opts ...grpc.CallOption) (*AddUseCaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUseCaseResponse)
	err := c.cc.Invoke(ctx, ControlService_AddUseCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) SubscribeUseCaseEvents(ctx context.Context, in *SubscribeUseCaseEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeUseCaseEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlService_ServiceDesc.Streams[0], ControlService_SubscribeUseCaseEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeUseCaseEventsRequest, SubscribeUseCaseEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_SubscribeUseCaseEventsClient = grpc.ServerStreamingClient[SubscribeUseCaseEventsResponse]

// ControlServiceServer is the server API for ControlService service.
// All implementations must embed UnimplementedControlServiceServer
// for forward compatibility.
type ControlServiceServer interface {
	// Starts the EEBus service
	StartService(context.Context, *EmptyRequest) (*EmptyResponse, error)
	// Stops the EEBus service
	StopService(context.Context, *EmptyRequest) (*EmptyResponse, error)
	// Set Config for the EEBus service
	// Each parameter is optional. If a parameter is not set, the current value is used.
	SetConfig(context.Context, *SetConfigRequest) (*EmptyResponse, error)
	// Starts Setup() for the EEBus service
	StartSetup(context.Context, *EmptyRequest) (*EmptyResponse, error)
	// Adds a new entity to the EEBus service
	AddEntity(context.Context, *AddEntityRequest) (*EmptyResponse, error)
	// Removes an entity from the EEBus service
	RemoveEntity(context.Context, *RemoveEntityRequest) (*EmptyResponse, error)
	// Register remote SKI to the EEBus service
	RegisterRemoteSki(context.Context, *RegisterRemoteSkiRequest) (*EmptyResponse, error)
	// Adds an usecase to the EEBus service
	AddUseCase(context.Context, *AddUseCaseRequest) (*AddUseCaseResponse, error)
	// Subscribes to usecase events
	SubscribeUseCaseEvents(*SubscribeUseCaseEventsRequest, grpc.ServerStreamingServer[SubscribeUseCaseEventsResponse]) error
	mustEmbedUnimplementedControlServiceServer()
}

// UnimplementedControlServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlServiceServer struct{}

func (UnimplementedControlServiceServer) StartService(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartService not implemented")
}
func (UnimplementedControlServiceServer) StopService(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopService not implemented")
}
func (UnimplementedControlServiceServer) SetConfig(context.Context, *SetConfigRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedControlServiceServer) StartSetup(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSetup not implemented")
}
func (UnimplementedControlServiceServer) AddEntity(context.Context, *AddEntityRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntity not implemented")
}
func (UnimplementedControlServiceServer) RemoveEntity(context.Context, *RemoveEntityRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntity not implemented")
}
func (UnimplementedControlServiceServer) RegisterRemoteSki(context.Context, *RegisterRemoteSkiRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRemoteSki not implemented")
}
func (UnimplementedControlServiceServer) AddUseCase(context.Context, *AddUseCaseRequest) (*AddUseCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUseCase not implemented")
}
func (UnimplementedControlServiceServer) SubscribeUseCaseEvents(*SubscribeUseCaseEventsRequest, grpc.ServerStreamingServer[SubscribeUseCaseEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeUseCaseEvents not implemented")
}
func (UnimplementedControlServiceServer) mustEmbedUnimplementedControlServiceServer() {}
func (UnimplementedControlServiceServer) testEmbeddedByValue()                        {}

// UnsafeControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServiceServer will
// result in compilation errors.
type UnsafeControlServiceServer interface {
	mustEmbedUnimplementedControlServiceServer()
}

func RegisterControlServiceServer(s grpc.ServiceRegistrar, srv ControlServiceServer) {
	// If the following call pancis, it indicates UnimplementedControlServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControlService_ServiceDesc, srv)
}

func _ControlService_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_StartService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).StartService(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_StopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).StopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_StopService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).StopService(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_StartSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).StartSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_StartSetup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).StartSetup(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_AddEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).AddEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_AddEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).AddEntity(ctx, req.(*AddEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_RemoveEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).RemoveEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_RemoveEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).RemoveEntity(ctx, req.(*RemoveEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_RegisterRemoteSki_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRemoteSkiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).RegisterRemoteSki(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_RegisterRemoteSki_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).RegisterRemoteSki(ctx, req.(*RegisterRemoteSkiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_AddUseCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUseCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).AddUseCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_AddUseCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).AddUseCase(ctx, req.(*AddUseCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_SubscribeUseCaseEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeUseCaseEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServiceServer).SubscribeUseCaseEvents(m, &grpc.GenericServerStream[SubscribeUseCaseEventsRequest, SubscribeUseCaseEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlService_SubscribeUseCaseEventsServer = grpc.ServerStreamingServer[SubscribeUseCaseEventsResponse]

// ControlService_ServiceDesc is the grpc.ServiceDesc for ControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control_service.ControlService",
	HandlerType: (*ControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartService",
			Handler:    _ControlService_StartService_Handler,
		},
		{
			MethodName: "StopService",
			Handler:    _ControlService_StopService_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _ControlService_SetConfig_Handler,
		},
		{
			MethodName: "StartSetup",
			Handler:    _ControlService_StartSetup_Handler,
		},
		{
			MethodName: "AddEntity",
			Handler:    _ControlService_AddEntity_Handler,
		},
		{
			MethodName: "RemoveEntity",
			Handler:    _ControlService_RemoveEntity_Handler,
		},
		{
			MethodName: "RegisterRemoteSki",
			Handler:    _ControlService_RegisterRemoteSki_Handler,
		},
		{
			MethodName: "AddUseCase",
			Handler:    _ControlService_AddUseCase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeUseCaseEvents",
			Handler:       _ControlService_SubscribeUseCaseEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "control_service/control_service.proto",
}
