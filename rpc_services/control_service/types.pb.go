// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: control_service/types.proto

package control_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SharedType int32

const (
	SharedType_INVERTER SharedType = 0
)

// Enum value maps for SharedType.
var (
	SharedType_name = map[int32]string{
		0: "INVERTER",
	}
	SharedType_value = map[string]int32{
		"INVERTER": 0,
	}
)

func (x SharedType) Enum() *SharedType {
	p := new(SharedType)
	*p = x
	return p
}

func (x SharedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SharedType) Descriptor() protoreflect.EnumDescriptor {
	return file_control_service_types_proto_enumTypes[0].Descriptor()
}

func (SharedType) Type() protoreflect.EnumType {
	return &file_control_service_types_proto_enumTypes[0]
}

func (x SharedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SharedType.Descriptor instead.
func (SharedType) EnumDescriptor() ([]byte, []int) {
	return file_control_service_types_proto_rawDescGZIP(), []int{0}
}

type DeviceCategory_Enum int32

const (
	DeviceCategory_UNKNOWN                  DeviceCategory_Enum = 0
	DeviceCategory_GRID_CONNECTION_HUB      DeviceCategory_Enum = 1
	DeviceCategory_ENERGY_MANAGEMENT_SYSTEM DeviceCategory_Enum = 2
	DeviceCategory_E_MOBILITY               DeviceCategory_Enum = 3
	DeviceCategory_HVAC                     DeviceCategory_Enum = 4
	DeviceCategory_INVERTER                 DeviceCategory_Enum = 5
	DeviceCategory_DOMESTIC_APPLIANCE       DeviceCategory_Enum = 6
	DeviceCategory_METERING                 DeviceCategory_Enum = 7
)

// Enum value maps for DeviceCategory_Enum.
var (
	DeviceCategory_Enum_name = map[int32]string{
		0: "UNKNOWN",
		1: "GRID_CONNECTION_HUB",
		2: "ENERGY_MANAGEMENT_SYSTEM",
		3: "E_MOBILITY",
		4: "HVAC",
		5: "INVERTER",
		6: "DOMESTIC_APPLIANCE",
		7: "METERING",
	}
	DeviceCategory_Enum_value = map[string]int32{
		"UNKNOWN":                  0,
		"GRID_CONNECTION_HUB":      1,
		"ENERGY_MANAGEMENT_SYSTEM": 2,
		"E_MOBILITY":               3,
		"HVAC":                     4,
		"INVERTER":                 5,
		"DOMESTIC_APPLIANCE":       6,
		"METERING":                 7,
	}
)

func (x DeviceCategory_Enum) Enum() *DeviceCategory_Enum {
	p := new(DeviceCategory_Enum)
	*p = x
	return p
}

func (x DeviceCategory_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceCategory_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_control_service_types_proto_enumTypes[1].Descriptor()
}

func (DeviceCategory_Enum) Type() protoreflect.EnumType {
	return &file_control_service_types_proto_enumTypes[1]
}

func (x DeviceCategory_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceCategory_Enum.Descriptor instead.
func (DeviceCategory_Enum) EnumDescriptor() ([]byte, []int) {
	return file_control_service_types_proto_rawDescGZIP(), []int{0, 0}
}

type EntityType_Enum int32

const (
	EntityType_UNKNOWN                       EntityType_Enum = 0
	EntityType_Battery                       EntityType_Enum = 1
	EntityType_Compressor                    EntityType_Enum = 2
	EntityType_DeviceInformation             EntityType_Enum = 3
	EntityType_DHWCircuit                    EntityType_Enum = 4
	EntityType_DHWStorage                    EntityType_Enum = 5
	EntityType_Dishwasher                    EntityType_Enum = 6
	EntityType_Dryer                         EntityType_Enum = 7
	EntityType_ElectricalImmersionHeater     EntityType_Enum = 8
	EntityType_Fan                           EntityType_Enum = 9
	EntityType_GasHeatingAppliance           EntityType_Enum = 10
	EntityType_Generic                       EntityType_Enum = 11
	EntityType_HeatingBufferStorage          EntityType_Enum = 12
	EntityType_HeatingCircuit                EntityType_Enum = 13
	EntityType_HeatingObject                 EntityType_Enum = 14
	EntityType_HeatingZone                   EntityType_Enum = 15
	EntityType_HeatPumpAppliance             EntityType_Enum = 16
	EntityType_HeatSinkCircuit               EntityType_Enum = 17
	EntityType_HeatSourceCircuit             EntityType_Enum = 18
	EntityType_HeatSourceUnit                EntityType_Enum = 19
	EntityType_HvacController                EntityType_Enum = 20
	EntityType_HvacRoom                      EntityType_Enum = 21
	EntityType_InstantDHWHeater              EntityType_Enum = 22
	EntityType_Inverter                      EntityType_Enum = 23
	EntityType_OilHeatingAppliance           EntityType_Enum = 24
	EntityType_Pump                          EntityType_Enum = 25
	EntityType_RefrigerantCircuit            EntityType_Enum = 26
	EntityType_SmartEnergyAppliance          EntityType_Enum = 27
	EntityType_SolarDHWStorage               EntityType_Enum = 28
	EntityType_SolarThermalCircuit           EntityType_Enum = 29
	EntityType_SubMeterElectricity           EntityType_Enum = 30
	EntityType_TemperatureSensor             EntityType_Enum = 31
	EntityType_Washer                        EntityType_Enum = 32
	EntityType_BatterySystem                 EntityType_Enum = 33
	EntityType_ElectricityGenerationSystem   EntityType_Enum = 34
	EntityType_ElectricityStorageSystem      EntityType_Enum = 35
	EntityType_GridConnectionPointOfPremises EntityType_Enum = 36
	EntityType_Household                     EntityType_Enum = 37
	EntityType_PVSystem                      EntityType_Enum = 38
	EntityType_EV                            EntityType_Enum = 39
	EntityType_EVSE                          EntityType_Enum = 40
	EntityType_ChargingOutlet                EntityType_Enum = 41
	EntityType_CEM                           EntityType_Enum = 42
	EntityType_PV                            EntityType_Enum = 43
	EntityType_PVESHybrid                    EntityType_Enum = 44
	EntityType_ElectricalStorage             EntityType_Enum = 45
	EntityType_PVString                      EntityType_Enum = 46
	EntityType_GridGuard                     EntityType_Enum = 47
	EntityType_ControllableSystem            EntityType_Enum = 48
)

// Enum value maps for EntityType_Enum.
var (
	EntityType_Enum_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "Battery",
		2:  "Compressor",
		3:  "DeviceInformation",
		4:  "DHWCircuit",
		5:  "DHWStorage",
		6:  "Dishwasher",
		7:  "Dryer",
		8:  "ElectricalImmersionHeater",
		9:  "Fan",
		10: "GasHeatingAppliance",
		11: "Generic",
		12: "HeatingBufferStorage",
		13: "HeatingCircuit",
		14: "HeatingObject",
		15: "HeatingZone",
		16: "HeatPumpAppliance",
		17: "HeatSinkCircuit",
		18: "HeatSourceCircuit",
		19: "HeatSourceUnit",
		20: "HvacController",
		21: "HvacRoom",
		22: "InstantDHWHeater",
		23: "Inverter",
		24: "OilHeatingAppliance",
		25: "Pump",
		26: "RefrigerantCircuit",
		27: "SmartEnergyAppliance",
		28: "SolarDHWStorage",
		29: "SolarThermalCircuit",
		30: "SubMeterElectricity",
		31: "TemperatureSensor",
		32: "Washer",
		33: "BatterySystem",
		34: "ElectricityGenerationSystem",
		35: "ElectricityStorageSystem",
		36: "GridConnectionPointOfPremises",
		37: "Household",
		38: "PVSystem",
		39: "EV",
		40: "EVSE",
		41: "ChargingOutlet",
		42: "CEM",
		43: "PV",
		44: "PVESHybrid",
		45: "ElectricalStorage",
		46: "PVString",
		47: "GridGuard",
		48: "ControllableSystem",
	}
	EntityType_Enum_value = map[string]int32{
		"UNKNOWN":                       0,
		"Battery":                       1,
		"Compressor":                    2,
		"DeviceInformation":             3,
		"DHWCircuit":                    4,
		"DHWStorage":                    5,
		"Dishwasher":                    6,
		"Dryer":                         7,
		"ElectricalImmersionHeater":     8,
		"Fan":                           9,
		"GasHeatingAppliance":           10,
		"Generic":                       11,
		"HeatingBufferStorage":          12,
		"HeatingCircuit":                13,
		"HeatingObject":                 14,
		"HeatingZone":                   15,
		"HeatPumpAppliance":             16,
		"HeatSinkCircuit":               17,
		"HeatSourceCircuit":             18,
		"HeatSourceUnit":                19,
		"HvacController":                20,
		"HvacRoom":                      21,
		"InstantDHWHeater":              22,
		"Inverter":                      23,
		"OilHeatingAppliance":           24,
		"Pump":                          25,
		"RefrigerantCircuit":            26,
		"SmartEnergyAppliance":          27,
		"SolarDHWStorage":               28,
		"SolarThermalCircuit":           29,
		"SubMeterElectricity":           30,
		"TemperatureSensor":             31,
		"Washer":                        32,
		"BatterySystem":                 33,
		"ElectricityGenerationSystem":   34,
		"ElectricityStorageSystem":      35,
		"GridConnectionPointOfPremises": 36,
		"Household":                     37,
		"PVSystem":                      38,
		"EV":                            39,
		"EVSE":                          40,
		"ChargingOutlet":                41,
		"CEM":                           42,
		"PV":                            43,
		"PVESHybrid":                    44,
		"ElectricalStorage":             45,
		"PVString":                      46,
		"GridGuard":                     47,
		"ControllableSystem":            48,
	}
)

func (x EntityType_Enum) Enum() *EntityType_Enum {
	p := new(EntityType_Enum)
	*p = x
	return p
}

func (x EntityType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_control_service_types_proto_enumTypes[2].Descriptor()
}

func (EntityType_Enum) Type() protoreflect.EnumType {
	return &file_control_service_types_proto_enumTypes[2]
}

func (x EntityType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityType_Enum.Descriptor instead.
func (EntityType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_control_service_types_proto_rawDescGZIP(), []int{1, 0}
}

type DeviceType_Enum int32

const (
	DeviceType_UNKNOWN                   DeviceType_Enum = 0
	DeviceType_DISHWASHER                DeviceType_Enum = 1
	DeviceType_DRYER                     DeviceType_Enum = 2
	DeviceType_ENVIRONMENT_SENSOR        DeviceType_Enum = 3
	DeviceType_GENERIC                   DeviceType_Enum = 4
	DeviceType_HEAT_GENERATION_SYSTEM    DeviceType_Enum = 5
	DeviceType_HEAT_SINK_SYSTEM          DeviceType_Enum = 6
	DeviceType_HEAT_STORAGE_SYSTEM       DeviceType_Enum = 7
	DeviceType_HVAC_CONTROLLER           DeviceType_Enum = 8
	DeviceType_SUBMETER                  DeviceType_Enum = 9
	DeviceType_WASHER                    DeviceType_Enum = 10
	DeviceType_ELECTRICITY_SUPPLY_SYSTEM DeviceType_Enum = 11
	DeviceType_ENERGY_MANAGEMENT_SYSTEM  DeviceType_Enum = 12
	DeviceType_INVERTER                  DeviceType_Enum = 13
	DeviceType_CHARGING_STATION          DeviceType_Enum = 14
)

// Enum value maps for DeviceType_Enum.
var (
	DeviceType_Enum_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "DISHWASHER",
		2:  "DRYER",
		3:  "ENVIRONMENT_SENSOR",
		4:  "GENERIC",
		5:  "HEAT_GENERATION_SYSTEM",
		6:  "HEAT_SINK_SYSTEM",
		7:  "HEAT_STORAGE_SYSTEM",
		8:  "HVAC_CONTROLLER",
		9:  "SUBMETER",
		10: "WASHER",
		11: "ELECTRICITY_SUPPLY_SYSTEM",
		12: "ENERGY_MANAGEMENT_SYSTEM",
		13: "INVERTER",
		14: "CHARGING_STATION",
	}
	DeviceType_Enum_value = map[string]int32{
		"UNKNOWN":                   0,
		"DISHWASHER":                1,
		"DRYER":                     2,
		"ENVIRONMENT_SENSOR":        3,
		"GENERIC":                   4,
		"HEAT_GENERATION_SYSTEM":    5,
		"HEAT_SINK_SYSTEM":          6,
		"HEAT_STORAGE_SYSTEM":       7,
		"HVAC_CONTROLLER":           8,
		"SUBMETER":                  9,
		"WASHER":                    10,
		"ELECTRICITY_SUPPLY_SYSTEM": 11,
		"ENERGY_MANAGEMENT_SYSTEM":  12,
		"INVERTER":                  13,
		"CHARGING_STATION":          14,
	}
)

func (x DeviceType_Enum) Enum() *DeviceType_Enum {
	p := new(DeviceType_Enum)
	*p = x
	return p
}

func (x DeviceType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_control_service_types_proto_enumTypes[3].Descriptor()
}

func (DeviceType_Enum) Type() protoreflect.EnumType {
	return &file_control_service_types_proto_enumTypes[3]
}

func (x DeviceType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType_Enum.Descriptor instead.
func (DeviceType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_control_service_types_proto_rawDescGZIP(), []int{2, 0}
}

type UseCase_ActorType_Enum int32

const (
	UseCase_ActorType_UNKNOWN                  UseCase_ActorType_Enum = 0
	UseCase_ActorType_Battery                  UseCase_ActorType_Enum = 1
	UseCase_ActorType_BatterySystem            UseCase_ActorType_Enum = 2
	UseCase_ActorType_CEM                      UseCase_ActorType_Enum = 3
	UseCase_ActorType_ConfigurationAppliance   UseCase_ActorType_Enum = 4
	UseCase_ActorType_Compressor               UseCase_ActorType_Enum = 5
	UseCase_ActorType_ControllableSystem       UseCase_ActorType_Enum = 6
	UseCase_ActorType_DHWCircuit               UseCase_ActorType_Enum = 7
	UseCase_ActorType_EnergyBroker             UseCase_ActorType_Enum = 8
	UseCase_ActorType_EnergyConsumer           UseCase_ActorType_Enum = 9
	UseCase_ActorType_EnergyGuard              UseCase_ActorType_Enum = 10
	UseCase_ActorType_EVSE                     UseCase_ActorType_Enum = 11
	UseCase_ActorType_EV                       UseCase_ActorType_Enum = 12
	UseCase_ActorType_GridConnectionPoint      UseCase_ActorType_Enum = 13
	UseCase_ActorType_HeatPump                 UseCase_ActorType_Enum = 14
	UseCase_ActorType_HeatingCircuit           UseCase_ActorType_Enum = 15
	UseCase_ActorType_HeatingZone              UseCase_ActorType_Enum = 16
	UseCase_ActorType_HVACRoom                 UseCase_ActorType_Enum = 17
	UseCase_ActorType_Inverter                 UseCase_ActorType_Enum = 18
	UseCase_ActorType_MonitoredUnit            UseCase_ActorType_Enum = 19
	UseCase_ActorType_MonitoringAppliance      UseCase_ActorType_Enum = 20
	UseCase_ActorType_OutdoorTemperatureSensor UseCase_ActorType_Enum = 21
	UseCase_ActorType_PVString                 UseCase_ActorType_Enum = 22
	UseCase_ActorType_PVSystem                 UseCase_ActorType_Enum = 23
	UseCase_ActorType_SmartAppliance           UseCase_ActorType_Enum = 24
	UseCase_ActorType_VisualizationAppliance   UseCase_ActorType_Enum = 25
)

// Enum value maps for UseCase_ActorType_Enum.
var (
	UseCase_ActorType_Enum_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "Battery",
		2:  "BatterySystem",
		3:  "CEM",
		4:  "ConfigurationAppliance",
		5:  "Compressor",
		6:  "ControllableSystem",
		7:  "DHWCircuit",
		8:  "EnergyBroker",
		9:  "EnergyConsumer",
		10: "EnergyGuard",
		11: "EVSE",
		12: "EV",
		13: "GridConnectionPoint",
		14: "HeatPump",
		15: "HeatingCircuit",
		16: "HeatingZone",
		17: "HVACRoom",
		18: "Inverter",
		19: "MonitoredUnit",
		20: "MonitoringAppliance",
		21: "OutdoorTemperatureSensor",
		22: "PVString",
		23: "PVSystem",
		24: "SmartAppliance",
		25: "VisualizationAppliance",
	}
	UseCase_ActorType_Enum_value = map[string]int32{
		"UNKNOWN":                  0,
		"Battery":                  1,
		"BatterySystem":            2,
		"CEM":                      3,
		"ConfigurationAppliance":   4,
		"Compressor":               5,
		"ControllableSystem":       6,
		"DHWCircuit":               7,
		"EnergyBroker":             8,
		"EnergyConsumer":           9,
		"EnergyGuard":              10,
		"EVSE":                     11,
		"EV":                       12,
		"GridConnectionPoint":      13,
		"HeatPump":                 14,
		"HeatingCircuit":           15,
		"HeatingZone":              16,
		"HVACRoom":                 17,
		"Inverter":                 18,
		"MonitoredUnit":            19,
		"MonitoringAppliance":      20,
		"OutdoorTemperatureSensor": 21,
		"PVString":                 22,
		"PVSystem":                 23,
		"SmartAppliance":           24,
		"VisualizationAppliance":   25,
	}
)

func (x UseCase_ActorType_Enum) Enum() *UseCase_ActorType_Enum {
	p := new(UseCase_ActorType_Enum)
	*p = x
	return p
}

func (x UseCase_ActorType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseCase_ActorType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_control_service_types_proto_enumTypes[4].Descriptor()
}

func (UseCase_ActorType_Enum) Type() protoreflect.EnumType {
	return &file_control_service_types_proto_enumTypes[4]
}

func (x UseCase_ActorType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseCase_ActorType_Enum.Descriptor instead.
func (UseCase_ActorType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_control_service_types_proto_rawDescGZIP(), []int{3, 0, 0}
}

type UseCase_NameType_Enum int32

const (
	UseCase_NameType_UNKNOWN                                                      UseCase_NameType_Enum = 0
	UseCase_NameType_configurationOfDhwSystemFunction                             UseCase_NameType_Enum = 1
	UseCase_NameType_configurationOfDhwTemperature                                UseCase_NameType_Enum = 2
	UseCase_NameType_configurationOfRoomCoolingSystemFunction                     UseCase_NameType_Enum = 3
	UseCase_NameType_configurationOfRoomCoolingTemperature                        UseCase_NameType_Enum = 4
	UseCase_NameType_configurationOfRoomHeatingSystemFunction                     UseCase_NameType_Enum = 5
	UseCase_NameType_configurationOfRoomHeatingTemperature                        UseCase_NameType_Enum = 6
	UseCase_NameType_controlOfBattery                                             UseCase_NameType_Enum = 7
	UseCase_NameType_coordinatedEvCharging                                        UseCase_NameType_Enum = 8
	UseCase_NameType_evChargingSummary                                            UseCase_NameType_Enum = 9
	UseCase_NameType_evCommissioningAndConfiguration                              UseCase_NameType_Enum = 10
	UseCase_NameType_evseCommissioningAndConfiguration                            UseCase_NameType_Enum = 11
	UseCase_NameType_evStateOfCharge                                              UseCase_NameType_Enum = 12
	UseCase_NameType_flexibleLoad                                                 UseCase_NameType_Enum = 13
	UseCase_NameType_flexibleStartForWhiteGoods                                   UseCase_NameType_Enum = 14
	UseCase_NameType_limitationOfPowerConsumption                                 UseCase_NameType_Enum = 15
	UseCase_NameType_limitationOfPowerProduction                                  UseCase_NameType_Enum = 16
	UseCase_NameType_incentiveTableBasedPowerConsumptionManagement                UseCase_NameType_Enum = 17
	UseCase_NameType_measurementOfElectricityDuringEvCharging                     UseCase_NameType_Enum = 18
	UseCase_NameType_monitoringAndControlOfSmartGridReadyConditions               UseCase_NameType_Enum = 19
	UseCase_NameType_monitoringOfBattery                                          UseCase_NameType_Enum = 20
	UseCase_NameType_monitoringOfDhwSystemFunction                                UseCase_NameType_Enum = 21
	UseCase_NameType_monitoringOfDhwTemperature                                   UseCase_NameType_Enum = 22
	UseCase_NameType_monitoringOfGridConnectionPoint                              UseCase_NameType_Enum = 23
	UseCase_NameType_monitoringOfInverter                                         UseCase_NameType_Enum = 24
	UseCase_NameType_monitoringOfOutdoorTemperature                               UseCase_NameType_Enum = 25
	UseCase_NameType_monitoringOfPowerConsumption                                 UseCase_NameType_Enum = 26
	UseCase_NameType_monitoringOfPvString                                         UseCase_NameType_Enum = 27
	UseCase_NameType_monitoringOfRoomCoolingSystemFunction                        UseCase_NameType_Enum = 28
	UseCase_NameType_monitoringOfRoomHeatingSystemFunction                        UseCase_NameType_Enum = 29
	UseCase_NameType_monitoringOfRoomTemperature                                  UseCase_NameType_Enum = 30
	UseCase_NameType_optimizationOfSelfConsumptionByHeatPumpCompressorFlexibility UseCase_NameType_Enum = 31
	UseCase_NameType_optimizationOfSelfConsumptionDuringEvCharging                UseCase_NameType_Enum = 32
	UseCase_NameType_overloadProtectionByEvChargingCurrentCurtailment             UseCase_NameType_Enum = 33
	UseCase_NameType_visualizationOfAggregatedBatteryData                         UseCase_NameType_Enum = 34
	UseCase_NameType_visualizationOfAggregatedPhotovoltaicData                    UseCase_NameType_Enum = 35
	UseCase_NameType_visualizationOfHeatingAreaName                               UseCase_NameType_Enum = 36
)

// Enum value maps for UseCase_NameType_Enum.
var (
	UseCase_NameType_Enum_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "configurationOfDhwSystemFunction",
		2:  "configurationOfDhwTemperature",
		3:  "configurationOfRoomCoolingSystemFunction",
		4:  "configurationOfRoomCoolingTemperature",
		5:  "configurationOfRoomHeatingSystemFunction",
		6:  "configurationOfRoomHeatingTemperature",
		7:  "controlOfBattery",
		8:  "coordinatedEvCharging",
		9:  "evChargingSummary",
		10: "evCommissioningAndConfiguration",
		11: "evseCommissioningAndConfiguration",
		12: "evStateOfCharge",
		13: "flexibleLoad",
		14: "flexibleStartForWhiteGoods",
		15: "limitationOfPowerConsumption",
		16: "limitationOfPowerProduction",
		17: "incentiveTableBasedPowerConsumptionManagement",
		18: "measurementOfElectricityDuringEvCharging",
		19: "monitoringAndControlOfSmartGridReadyConditions",
		20: "monitoringOfBattery",
		21: "monitoringOfDhwSystemFunction",
		22: "monitoringOfDhwTemperature",
		23: "monitoringOfGridConnectionPoint",
		24: "monitoringOfInverter",
		25: "monitoringOfOutdoorTemperature",
		26: "monitoringOfPowerConsumption",
		27: "monitoringOfPvString",
		28: "monitoringOfRoomCoolingSystemFunction",
		29: "monitoringOfRoomHeatingSystemFunction",
		30: "monitoringOfRoomTemperature",
		31: "optimizationOfSelfConsumptionByHeatPumpCompressorFlexibility",
		32: "optimizationOfSelfConsumptionDuringEvCharging",
		33: "overloadProtectionByEvChargingCurrentCurtailment",
		34: "visualizationOfAggregatedBatteryData",
		35: "visualizationOfAggregatedPhotovoltaicData",
		36: "visualizationOfHeatingAreaName",
	}
	UseCase_NameType_Enum_value = map[string]int32{
		"UNKNOWN":                                                      0,
		"configurationOfDhwSystemFunction":                             1,
		"configurationOfDhwTemperature":                                2,
		"configurationOfRoomCoolingSystemFunction":                     3,
		"configurationOfRoomCoolingTemperature":                        4,
		"configurationOfRoomHeatingSystemFunction":                     5,
		"configurationOfRoomHeatingTemperature":                        6,
		"controlOfBattery":                                             7,
		"coordinatedEvCharging":                                        8,
		"evChargingSummary":                                            9,
		"evCommissioningAndConfiguration":                              10,
		"evseCommissioningAndConfiguration":                            11,
		"evStateOfCharge":                                              12,
		"flexibleLoad":                                                 13,
		"flexibleStartForWhiteGoods":                                   14,
		"limitationOfPowerConsumption":                                 15,
		"limitationOfPowerProduction":                                  16,
		"incentiveTableBasedPowerConsumptionManagement":                17,
		"measurementOfElectricityDuringEvCharging":                     18,
		"monitoringAndControlOfSmartGridReadyConditions":               19,
		"monitoringOfBattery":                                          20,
		"monitoringOfDhwSystemFunction":                                21,
		"monitoringOfDhwTemperature":                                   22,
		"monitoringOfGridConnectionPoint":                              23,
		"monitoringOfInverter":                                         24,
		"monitoringOfOutdoorTemperature":                               25,
		"monitoringOfPowerConsumption":                                 26,
		"monitoringOfPvString":                                         27,
		"monitoringOfRoomCoolingSystemFunction":                        28,
		"monitoringOfRoomHeatingSystemFunction":                        29,
		"monitoringOfRoomTemperature":                                  30,
		"optimizationOfSelfConsumptionByHeatPumpCompressorFlexibility": 31,
		"optimizationOfSelfConsumptionDuringEvCharging":                32,
		"overloadProtectionByEvChargingCurrentCurtailment":             33,
		"visualizationOfAggregatedBatteryData":                         34,
		"visualizationOfAggregatedPhotovoltaicData":                    35,
		"visualizationOfHeatingAreaName":                               36,
	}
)

func (x UseCase_NameType_Enum) Enum() *UseCase_NameType_Enum {
	p := new(UseCase_NameType_Enum)
	*p = x
	return p
}

func (x UseCase_NameType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseCase_NameType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_control_service_types_proto_enumTypes[5].Descriptor()
}

func (UseCase_NameType_Enum) Type() protoreflect.EnumType {
	return &file_control_service_types_proto_enumTypes[5]
}

func (x UseCase_NameType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseCase_NameType_Enum.Descriptor instead.
func (UseCase_NameType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_control_service_types_proto_rawDescGZIP(), []int{3, 1, 0}
}

type DeviceCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceCategory) Reset() {
	*x = DeviceCategory{}
	mi := &file_control_service_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCategory) ProtoMessage() {}

func (x *DeviceCategory) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCategory.ProtoReflect.Descriptor instead.
func (*DeviceCategory) Descriptor() ([]byte, []int) {
	return file_control_service_types_proto_rawDescGZIP(), []int{0}
}

type EntityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EntityType) Reset() {
	*x = EntityType{}
	mi := &file_control_service_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityType) ProtoMessage() {}

func (x *EntityType) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityType.ProtoReflect.Descriptor instead.
func (*EntityType) Descriptor() ([]byte, []int) {
	return file_control_service_types_proto_rawDescGZIP(), []int{1}
}

type DeviceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceType) Reset() {
	*x = DeviceType{}
	mi := &file_control_service_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceType) ProtoMessage() {}

func (x *DeviceType) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceType.ProtoReflect.Descriptor instead.
func (*DeviceType) Descriptor() ([]byte, []int) {
	return file_control_service_types_proto_rawDescGZIP(), []int{2}
}

type UseCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor UseCase_ActorType_Enum `protobuf:"varint,1,opt,name=actor,proto3,enum=control_service.UseCase_ActorType_Enum" json:"actor,omitempty"`
	Name  UseCase_NameType_Enum  `protobuf:"varint,2,opt,name=name,proto3,enum=control_service.UseCase_NameType_Enum" json:"name,omitempty"`
}

func (x *UseCase) Reset() {
	*x = UseCase{}
	mi := &file_control_service_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCase) ProtoMessage() {}

func (x *UseCase) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCase.ProtoReflect.Descriptor instead.
func (*UseCase) Descriptor() ([]byte, []int) {
	return file_control_service_types_proto_rawDescGZIP(), []int{3}
}

func (x *UseCase) GetActor() UseCase_ActorType_Enum {
	if x != nil {
		return x.Actor
	}
	return UseCase_ActorType_UNKNOWN
}

func (x *UseCase) GetName() UseCase_NameType_Enum {
	if x != nil {
		return x.Name
	}
	return UseCase_NameType_UNKNOWN
}

type UseCaseEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseCase *UseCase `protobuf:"bytes,1,opt,name=use_case,json=useCase,proto3" json:"use_case,omitempty"`
	Event   string   `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *UseCaseEvent) Reset() {
	*x = UseCaseEvent{}
	mi := &file_control_service_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseCaseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCaseEvent) ProtoMessage() {}

func (x *UseCaseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCaseEvent.ProtoReflect.Descriptor instead.
func (*UseCaseEvent) Descriptor() ([]byte, []int) {
	return file_control_service_types_proto_rawDescGZIP(), []int{4}
}

func (x *UseCaseEvent) GetUseCase() *UseCase {
	if x != nil {
		return x.UseCase
	}
	return nil
}

func (x *UseCaseEvent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

type UseCase_ActorType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UseCase_ActorType) Reset() {
	*x = UseCase_ActorType{}
	mi := &file_control_service_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseCase_ActorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCase_ActorType) ProtoMessage() {}

func (x *UseCase_ActorType) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCase_ActorType.ProtoReflect.Descriptor instead.
func (*UseCase_ActorType) Descriptor() ([]byte, []int) {
	return file_control_service_types_proto_rawDescGZIP(), []int{3, 0}
}

type UseCase_NameType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UseCase_NameType) Reset() {
	*x = UseCase_NameType{}
	mi := &file_control_service_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseCase_NameType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCase_NameType) ProtoMessage() {}

func (x *UseCase_NameType) ProtoReflect() protoreflect.Message {
	mi := &file_control_service_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCase_NameType.ProtoReflect.Descriptor instead.
func (*UseCase_NameType) Descriptor() ([]byte, []int) {
	return file_control_service_types_proto_rawDescGZIP(), []int{3, 1}
}

var File_control_service_types_proto protoreflect.FileDescriptor

var file_control_service_types_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xab,
	0x01, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x22, 0x98, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x55, 0x42, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x56, 0x41, 0x43, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x56, 0x45,
	0x52, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x4d, 0x45, 0x53, 0x54,
	0x49, 0x43, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x22, 0xb2, 0x07, 0x0a,
	0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x07, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x48, 0x57, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x48, 0x57, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x68, 0x77, 0x61, 0x73,
	0x68, 0x65, 0x72, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x72, 0x79, 0x65, 0x72, 0x10, 0x07,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d,
	0x6d, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x10, 0x08, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x61, 0x6e, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x61, 0x73, 0x48,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x10,
	0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x10, 0x0b, 0x12, 0x18,
	0x0a, 0x14, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d,
	0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x0e, 0x12,
	0x0f, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5a, 0x6f, 0x6e, 0x65, 0x10, 0x0f,
	0x12, 0x15, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x74, 0x50, 0x75, 0x6d, 0x70, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x74, 0x53,
	0x69, 0x6e, 0x6b, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11,
	0x48, 0x65, 0x61, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x76, 0x61, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x48,
	0x76, 0x61, 0x63, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x44, 0x48, 0x57, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x10, 0x16, 0x12,
	0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x10, 0x17, 0x12, 0x17, 0x0a,
	0x13, 0x4f, 0x69, 0x6c, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x10, 0x18, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x75, 0x6d, 0x70, 0x10, 0x19,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x69, 0x67, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x10, 0x1b, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x44, 0x48, 0x57, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x10, 0x1c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x6f, 0x6c, 0x61, 0x72,
	0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x10, 0x1d,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x1e, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x1f,
	0x12, 0x0a, 0x0a, 0x06, 0x57, 0x61, 0x73, 0x68, 0x65, 0x72, 0x10, 0x20, 0x12, 0x11, 0x0a, 0x0d,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x21, 0x12,
	0x1f, 0x0a, 0x1b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x22,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x23, 0x12, 0x21,
	0x0a, 0x1d, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x66, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x73, 0x10,
	0x24, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x10, 0x25,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x56, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x26, 0x12, 0x06,
	0x0a, 0x02, 0x45, 0x56, 0x10, 0x27, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x56, 0x53, 0x45, 0x10, 0x28,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x6c,
	0x65, 0x74, 0x10, 0x29, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x45, 0x4d, 0x10, 0x2a, 0x12, 0x06, 0x0a,
	0x02, 0x50, 0x56, 0x10, 0x2b, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x56, 0x45, 0x53, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x10, 0x2c, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x10, 0x2d, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x56, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x2e, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x72,
	0x69, 0x64, 0x47, 0x75, 0x61, 0x72, 0x64, 0x10, 0x2f, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10,
	0x30, 0x22, 0xbd, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xae, 0x02, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x48, 0x57, 0x41,
	0x53, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x59, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x49, 0x43, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x45, 0x41, 0x54, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x45, 0x41, 0x54, 0x5f, 0x53, 0x49, 0x4e, 0x4b, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x45, 0x41, 0x54,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x56, 0x41, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x4c, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42, 0x4d, 0x45, 0x54,
	0x45, 0x52, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x41, 0x53, 0x48, 0x45, 0x52, 0x10, 0x0a,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x49, 0x43, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x0b, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x0c, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0e, 0x22, 0xd7, 0x0f, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xe5, 0x03, 0x0a, 0x09, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd7, 0x03, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x48, 0x57,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x10, 0x09, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x47, 0x75, 0x61, 0x72, 0x64, 0x10, 0x0a,
	0x12, 0x08, 0x0a, 0x04, 0x45, 0x56, 0x53, 0x45, 0x10, 0x0b, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x56,
	0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x48,
	0x65, 0x61, 0x74, 0x50, 0x75, 0x6d, 0x70, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x10, 0x0f, 0x12, 0x0f, 0x0a,
	0x0b, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5a, 0x6f, 0x6e, 0x65, 0x10, 0x10, 0x12, 0x0c,
	0x0a, 0x08, 0x48, 0x56, 0x41, 0x43, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x10, 0x13, 0x12, 0x17, 0x0a,
	0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x10, 0x14, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x75, 0x74, 0x64, 0x6f, 0x6f,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x56, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x10, 0x16, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x56, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x17,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x10, 0x18, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x19,
	0x1a, 0xe8, 0x0a, 0x0a, 0x08, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdb, 0x0a,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x44, 0x68, 0x77, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x44, 0x68, 0x77, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x52,
	0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x52, 0x6f, 0x6f,
	0x6d, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x66, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x12,
	0x15, 0x0a, 0x11, 0x65, 0x76, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x65, 0x76, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x65,
	0x76, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x66, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x66, 0x6c, 0x65,
	0x78, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x10, 0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x10, 0x12, 0x31, 0x0a, 0x2d,
	0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x11, 0x12,
	0x2c, 0x0a, 0x28, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x44, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x76, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10, 0x12, 0x12, 0x32, 0x0a,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x66, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x47, 0x72, 0x69, 0x64,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10,
	0x13, 0x12, 0x17, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x66, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x10, 0x14, 0x12, 0x21, 0x0a, 0x1d, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x44, 0x68, 0x77, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x15, 0x12, 0x1e, 0x0a,
	0x1a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x44, 0x68, 0x77,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x16, 0x12, 0x23, 0x0a,
	0x1f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x47, 0x72, 0x69,
	0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x66, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x10, 0x18, 0x12, 0x22, 0x0a, 0x1e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x4f, 0x75, 0x74, 0x64,
	0x6f, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x19,
	0x12, 0x20, 0x0a, 0x1c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x66,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x66, 0x50, 0x76, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x1b, 0x12, 0x29, 0x0a, 0x25,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x52, 0x6f, 0x6f, 0x6d,
	0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1c, 0x12, 0x29, 0x0a, 0x25, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x1d, 0x12, 0x1f, 0x0a, 0x1b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x66, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x10, 0x1e, 0x12, 0x40, 0x0a, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48, 0x65, 0x61, 0x74, 0x50, 0x75, 0x6d, 0x70, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x10, 0x1f, 0x12, 0x31, 0x0a, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10, 0x20, 0x12, 0x34, 0x0a, 0x30, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x45, 0x76, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x75, 0x72, 0x74, 0x61, 0x69, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x21, 0x12, 0x28,
	0x0a, 0x24, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x66, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x10, 0x22, 0x12, 0x2d, 0x0a, 0x29, 0x76, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x10, 0x23, 0x12, 0x22, 0x0a, 0x1e, 0x76, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x24, 0x22, 0x59, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x07, 0x75, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2a, 0x1a, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x45, 0x52,
	0x10, 0x00, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x45, 0x56, 0x65, 0x72, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_control_service_types_proto_rawDescOnce sync.Once
	file_control_service_types_proto_rawDescData = file_control_service_types_proto_rawDesc
)

func file_control_service_types_proto_rawDescGZIP() []byte {
	file_control_service_types_proto_rawDescOnce.Do(func() {
		file_control_service_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_control_service_types_proto_rawDescData)
	})
	return file_control_service_types_proto_rawDescData
}

var file_control_service_types_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_control_service_types_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_control_service_types_proto_goTypes = []any{
	(SharedType)(0),             // 0: control_service.SharedType
	(DeviceCategory_Enum)(0),    // 1: control_service.DeviceCategory.Enum
	(EntityType_Enum)(0),        // 2: control_service.EntityType.Enum
	(DeviceType_Enum)(0),        // 3: control_service.DeviceType.Enum
	(UseCase_ActorType_Enum)(0), // 4: control_service.UseCase.ActorType.Enum
	(UseCase_NameType_Enum)(0),  // 5: control_service.UseCase.NameType.Enum
	(*DeviceCategory)(nil),      // 6: control_service.DeviceCategory
	(*EntityType)(nil),          // 7: control_service.EntityType
	(*DeviceType)(nil),          // 8: control_service.DeviceType
	(*UseCase)(nil),             // 9: control_service.UseCase
	(*UseCaseEvent)(nil),        // 10: control_service.UseCaseEvent
	(*UseCase_ActorType)(nil),   // 11: control_service.UseCase.ActorType
	(*UseCase_NameType)(nil),    // 12: control_service.UseCase.NameType
}
var file_control_service_types_proto_depIdxs = []int32{
	4, // 0: control_service.UseCase.actor:type_name -> control_service.UseCase.ActorType.Enum
	5, // 1: control_service.UseCase.name:type_name -> control_service.UseCase.NameType.Enum
	9, // 2: control_service.UseCaseEvent.use_case:type_name -> control_service.UseCase
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_control_service_types_proto_init() }
func file_control_service_types_proto_init() {
	if File_control_service_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_control_service_types_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_control_service_types_proto_goTypes,
		DependencyIndexes: file_control_service_types_proto_depIdxs,
		EnumInfos:         file_control_service_types_proto_enumTypes,
		MessageInfos:      file_control_service_types_proto_msgTypes,
	}.Build()
	File_control_service_types_proto = out.File
	file_control_service_types_proto_rawDesc = nil
	file_control_service_types_proto_goTypes = nil
	file_control_service_types_proto_depIdxs = nil
}
